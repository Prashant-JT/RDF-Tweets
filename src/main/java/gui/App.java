package gui;

import backend.FileReader;
import backend.RDFModel;
import backend.TwitterConnection;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.riot.RDFDataMgr;
import org.apache.jena.riot.RDFFormat;
import twitter4j.Status;
import twitter4j.TwitterException;

/**
 *
 * @author prash
 */
public class App extends javax.swing.JFrame {
    
    private final JFileChooser fc = new JFileChooser();
    private TwitterConnection connection;
    private RDFModel models;
    private Model createDefaultModel;
    
    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        this.connection = null;
        this.createDefaultModel = ModelFactory.createDefaultModel();
        fc.setAcceptAllFileFilterUsed(false);
        fc.addChoosableFileFilter(new FileNameExtensionFilter("Text file", "txt"));
        buttonGroup.add(turtleFormat);
        buttonGroup.add(XMLFormat);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        termLabel = new javax.swing.JLabel();
        term = new javax.swing.JTextField();
        themeLabel = new javax.swing.JLabel();
        theme = new javax.swing.JTextField();
        numTweetsLabel = new javax.swing.JLabel();
        tweetsSpinner = new javax.swing.JSpinner();
        formatLabel = new javax.swing.JLabel();
        turtleFormat = new javax.swing.JRadioButton();
        XMLFormat = new javax.swing.JRadioButton();
        themeDescriptionLabel = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        themeDescription = new javax.swing.JTextArea();
        search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tweetsRetrieved = new javax.swing.JTextArea();
        tweetsRetrievedLabel = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        keysMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        separatorMenu1 = new javax.swing.JPopupMenu.Separator();
        exitMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        docsMenu = new javax.swing.JMenuItem();
        separatorMenu2 = new javax.swing.JPopupMenu.Separator();
        authorMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RDF Tweet");

        termLabel.setText("Term to search");

        term.setToolTipText("Write term");
        term.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termActionPerformed(evt);
            }
        });

        themeLabel.setText("Theme of the term");

        theme.setToolTipText("Write theme");
        theme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themeActionPerformed(evt);
            }
        });

        numTweetsLabel.setText("Number of tweets");

        tweetsSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 50, 1));
        tweetsSpinner.setToolTipText("Number of tweets");

        formatLabel.setText("File format");

        turtleFormat.setSelected(true);
        turtleFormat.setText("Turtle");
        turtleFormat.setToolTipText("Turtle format");
        turtleFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turtleFormatActionPerformed(evt);
            }
        });

        XMLFormat.setText("XML");

        themeDescriptionLabel.setText("Theme description");

        themeDescription.setColumns(20);
        themeDescription.setRows(5);
        themeDescription.setBorder(null);
        jScrollPane.setViewportView(themeDescription);

        search.setText("Search");
        search.setAlignmentX(0.5F);
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        tweetsRetrieved.setEditable(false);
        tweetsRetrieved.setColumns(20);
        tweetsRetrieved.setRows(5);
        tweetsRetrieved.setToolTipText("Tweets retrieved");
        jScrollPane1.setViewportView(tweetsRetrieved);

        tweetsRetrievedLabel.setText("Tweets retrieved");

        fileMenu.setText("File");

        keysMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        keysMenu.setText("Import Keys");
        keysMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keysMenuActionPerformed(evt);
            }
        });
        fileMenu.add(keysMenu);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenu);
        fileMenu.add(separatorMenu1);

        exitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        menu.add(fileMenu);

        helpMenu.setText("Help");

        docsMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        docsMenu.setText("Documentation");
        docsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docsMenuActionPerformed(evt);
            }
        });
        helpMenu.add(docsMenu);
        helpMenu.add(separatorMenu2);

        authorMenu.setText("Author");
        authorMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorMenuActionPerformed(evt);
            }
        });
        helpMenu.add(authorMenu);

        menu.add(helpMenu);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane)
                    .addComponent(theme)
                    .addComponent(term)
                    .addComponent(themeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(termLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(themeDescriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(turtleFormat)
                            .addComponent(numTweetsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(XMLFormat)
                            .addComponent(tweetsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(formatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                    .addComponent(tweetsRetrievedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addComponent(search, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                .addGap(250, 250, 250))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(termLabel)
                    .addComponent(tweetsRetrievedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(term, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(themeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(theme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(themeDescriptionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numTweetsLabel)
                            .addComponent(tweetsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(formatLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(turtleFormat)
                            .addComponent(XMLFormat)))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addComponent(search)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        fc.resetChoosableFileFilters();
        if(turtleFormat.isSelected()) {
            fc.addChoosableFileFilter(new FileNameExtensionFilter("Turtle file", "ttl"));
        }else{
            fc.addChoosableFileFilter(new FileNameExtensionFilter("XML file", "rdf"));
        }
        int result = fc.showSaveDialog(this);
        
        if(result == JFileChooser.APPROVE_OPTION) {
            String fileName = fc.getSelectedFile().getAbsolutePath();
            
            OutputStream output;
            try {
                if(turtleFormat.isSelected()) {
                    output = new FileOutputStream(new File(fileName + ".ttl"));
                    RDFDataMgr.write(output, createDefaultModel, RDFFormat.TURTLE_BLOCKS);
                    output.close();
                }else{
                    output = new FileOutputStream(new File(fileName + ".rdf"));
                    RDFDataMgr.write(output, createDefaultModel, RDFFormat.RDFXML);
                    output.close();
                }
                JOptionPane.showMessageDialog(this, "Your file has been saved!", "File saved", JOptionPane.INFORMATION_MESSAGE);
                fc.resetChoosableFileFilters();
                fc.addChoosableFileFilter(new FileNameExtensionFilter("Text file", "txt"));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "File could not be saved", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveMenuActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        int res = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to exit?", 
                "Exit", JOptionPane.YES_NO_OPTION);
        
        if(res == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_exitMenuActionPerformed

    private void termActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_termActionPerformed

    private void keysMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keysMenuActionPerformed
        int res = fc.showOpenDialog(null);
        
        if(res == JFileChooser.APPROVE_OPTION) {
            FileReader reader = new FileReader(fc.getSelectedFile().getAbsolutePath());
            connection = new TwitterConnection((HashMap<String, String>) reader.getKeys());
            boolean established = connection.createConnection();
            if(established) {
                JOptionPane.showMessageDialog(this, "Connection has been established!",
                        "Connection established", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(this, "Connection failed!",
                        "Error to connect", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_keysMenuActionPerformed

    private void themeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_themeActionPerformed

    private void docsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docsMenuActionPerformed
        JOptionPane.showMessageDialog(this, "1. Import keys from a text file which must be written in the following order: \n" +
                "ConsumerKey\nConsumerSecret\nAccessToken\nAccessTokenSecret\n" + 
                "2. Once the connection is established, fill all fields to retrieve data \n"
                + "3. Finally, select the format in which you would like to save the RDF model", 
                "Instructions", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_docsMenuActionPerformed

    private void authorMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorMenuActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Prashant Jeswani Tejwani", "Author", WIDTH);
    }//GEN-LAST:event_authorMenuActionPerformed

    private void turtleFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turtleFormatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_turtleFormatActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        if (term.getText().trim().isEmpty() || theme.getText().trim().isEmpty()
            || themeDescription.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields must be filled", "Incomplete fields",
                JOptionPane.WARNING_MESSAGE);
        } else if(this.connection == null) {
            JOptionPane.showMessageDialog(this, "Connection hasn't been established.\n"
                + "To import keys go to:\nFile > Import Keys",
                "Keys not imported", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                List<Status> tweets = connection.searchTweets(term.getText(), (int) tweetsSpinner.getValue());
                tweets.forEach(tweet -> {
                    tweetsRetrieved.setText(tweetsRetrieved.getText() + "User: " + tweet.getUser().getName() + "\n"
                            + "Tweet: " + tweet.getText()+ "\n\n");
                });
                this.models = new RDFModel(term.getText(), theme.getText(), themeDescription.getText());
                tweets.forEach(tweet -> {
                    this.models.createModel(tweet, createDefaultModel);
                });
                JOptionPane.showMessageDialog(this, "Added term to model!\nIf you want to save the model go to:\nFile > Save",
                    "Model generated", JOptionPane.INFORMATION_MESSAGE);
            } catch (TwitterException ex) {
                JOptionPane.showMessageDialog(this, "An error has occurred in retrieving data!",
                    "Error to retrieve", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_searchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        App mainFrame = new App();
        mainFrame.setLocationRelativeTo(null);
        mainFrame.setResizable(false);
        mainFrame.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton XMLFormat;
    private javax.swing.JMenuItem authorMenu;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JMenuItem docsMenu;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel formatLabel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem keysMenu;
    private javax.swing.JMenuBar menu;
    private javax.swing.JLabel numTweetsLabel;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JButton search;
    private javax.swing.JPopupMenu.Separator separatorMenu1;
    private javax.swing.JPopupMenu.Separator separatorMenu2;
    private javax.swing.JTextField term;
    private javax.swing.JLabel termLabel;
    private javax.swing.JTextField theme;
    private javax.swing.JTextArea themeDescription;
    private javax.swing.JLabel themeDescriptionLabel;
    private javax.swing.JLabel themeLabel;
    private javax.swing.JRadioButton turtleFormat;
    private javax.swing.JTextArea tweetsRetrieved;
    private javax.swing.JLabel tweetsRetrievedLabel;
    private javax.swing.JSpinner tweetsSpinner;
    // End of variables declaration//GEN-END:variables
}
